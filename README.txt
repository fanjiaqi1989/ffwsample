2018.03.06
this is a egret framework sample project.
主要面对中小型项目开发框架。

理论应用：
关于mvc的使用
m--数据逻辑处理层
v--ui逻辑处理曾
c--调节m和v之间的关系
举例描述一个完成的mvc处理流程：
        V                                       C                                  M 
1.点击界面上的登陆按钮
                                触发登陆操作：从view层获取用户输入交给Model层
                                                                        Model组装通信需要的数据，请求服务器认证
                                                                        此时通知控制层进入等待返回状态
                                控制层收到登陆请求等待，通知view层锁定界面
视图锁定
                                                                        这时返回请求数据，进行解析
                                控制层根据数据，进行对应的ui控制
                                并通知view层解除锁定
按照控制器规则操作

//---------------------------------------
Model层--负责数据及业务逻辑处理
View层---负责UI显示及逻辑处理
Controller--负责解耦V/M层的关系

所以这种模块的分离，可以使view层人员不用关心model层具体的业务逻辑实现，而view层上的ui显示变动，也影响不到业务流程处理，达到代码分离，适合模块化的开发。并且在代码后期维护时，仍然保持各自模块的独立性，提高可维护性。
但是根据寡人多年开发的经验，标准的MVC结构仅适合于大型且复杂项目，因为本身模块化是很需要花时间，且由于模块化，增加了模块之间相互传递消息的逻辑，所以应视具体项目做合适的结构设定。
2018 04 08
关于开发框架的更新说明
其实在实际使用中，框架模式已经变成了MVP模式，即模型-视图-呈示器，最新演化为MVVM结构，而MVVM结构主要在于数据绑定，轻量级已经演化为VVM，即去掉视图层。

关于精简中小型项目模块划分


主要功能：

1.视图规范
    资源规范  app预加载 preload
    剩下各自模块的资源自行加载 ResLoadingView
    添加mc loading动画示例
    添加粒子效果示例，看样子效率不是很高

    视图层的个界面管理原则：addToStage 和 removeFromStage
    

2.消息规范
    ffw.Msg.ins.disp
    该类定义了全局消息通信。小型项目使用该方法。

3.websocket
    添加WebSocket示例。

4.http request
    添加HttpRequest示例。
    
5.其他
如果使用eui则 已经进行了 mvc中 view和controller的分离，所以可精简开发。

egret 性能点
1.带动画的组件不使用需移除舞台。
2.addChild 和 removeChile次数过多会有性能问题。
3.自带的tween性能也不太高
4.遮罩存在性能问题（使用scroller的viewport做裁剪，把组件放入其中，关闭横竖滚动）
5.多对象需要内存池处理
